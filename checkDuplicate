private <T,U> void checkDuplicate(List<T> list, Function<T, U> fun){
  Set set = new HashSet<>();
  for(T t : list){
    U u = fun.apply(t);
    if(!set.add(u))
      throw new Exception(....)
  }
}

checkDuplicate(userList, User::getName);

//========================================================

public <T> Predicate<T> distinctByInput(Function<? super T, Object> fun){
    Set set = new HashSet<>();
    return t -> set.add(fun.apply(t));
}


userList.stream().filter(distinctByInput(user -> user.getId)).collect(Collectors.toList());
